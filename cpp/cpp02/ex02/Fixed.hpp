#ifndef FIXED_H
#define FIXED_H

#include <iostream>
#include <cmath>

// ‚Ä¢Six op√©rateurs de comparaison : >, <, >=, <=, == and !=.
// ‚Ä¢Quatre op√©rateurs arithm√©tiques : +, -, *, et /.
// ‚Ä¢Les op√©rateurs de pre-incr√©ment, post-incr√©ment, pr√©-d√©cr√©ment et post-d√©cr√©ment,
// qui vont incr√©menter et d√©cr√©menter la valeur du nombre √† point fixe de la valeur
// repr√©sentable lapluspetitetelleque1 + nbr > 1.
// Ajoutez les overloads de fonctions membres statiques publiques √† votre classe :
// ‚Ä¢La fonction membre statique min qui prend une r√©f√©rence sur deux nombres a point
// fixe et qui renvoie une r√©ference vers le plus petit, et un overload qui prend deux
// references sur deux nombres √† point fixe et qui renvoie une r√©ference vers la plus
// petite valeur.
// ‚Ä¢La fonction membre statique max qui prend une r√©f√©rence sur deux nombres √† point
// fixe et qui renvoie une r√©ference vers le plus grand, et un overload qui prend une
// ref√©rence sur deux nombres √† point fixe et qui renvoie une r√©ference vers la plus
// grande valeur.

class Fixed
{
    public:
        Fixed( void );
        Fixed ( const int );
        Fixed (const float );
        Fixed( const Fixed& );
        Fixed& operator=( const Fixed& );
        int operator<( const Fixed& );
        int operator>( const Fixed& );
        int operator>=( const Fixed& );
        int operator<=( const Fixed& );
        int operator!=( const Fixed& );
        int operator==( const Fixed& );
        Fixed operator+( const Fixed& );
        Fixed operator-( const Fixed& );
        Fixed operator*( const Fixed& );
        Fixed operator/( const Fixed& );
        Fixed& operator++( void );
        Fixed& operator--( void );
        Fixed operator++( int );
        Fixed operator--( int );
        static Fixed &max( Fixed&, Fixed& );
        static const Fixed &max(const Fixed &, const Fixed &);
        static Fixed &min( Fixed&, Fixed& );
        static const Fixed &min(const Fixed &, const Fixed &);
        ~Fixed( void );
        int getRawBits(void) const;
        void setRawBits(int const raw);
        float toFloat(void) const;
        int toInt(void) const;

    private:
        int point_value;
        const static int bit_nbr = 8;
};
std::ostream& operator<<( std::ostream&, const Fixed& );

#endif